{"version":3,"sources":["./src/environments/environment.ts","./src/app/components/servers/servers.component.ts","./src/app/components/servers/servers.component.html","./src/app/components/server-config/server-config.component.ts","./src/app/components/server-config/server-config.component.html","./src/app/services/ws.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/nav-bar/nav-bar.component.ts","./src/app/components/nav-bar/nav-bar.component.html","./src/app/components/server/server.component.ts","./src/app/components/server/server.component.html","./src/app/material/material.module.ts","./src/app/models/server.ts","./src/app/app-routing.module.ts","./src/app/services/servers.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAEoC;AAEP;AACf;AACF;;;;;;;;;;ICKrD,yEAAuC;IAAA,mEAAO;IAAA,4DAAK;;;IACnD,yEAAwC;IAAA,uDAAqB;IAAA,4DAAK;;;IAA1B,0DAAqB;IAArB,gGAAqB;;;IAK7D,yEAAuC;IAAA,+DAAG;IAAA,4DAAK;;;IAC/C,yEAAwC;IAAA,uDAAe;IAAA,4DAAK;;;IAApB,0DAAe;IAAf,0FAAe;;;IAKvD,yEAAuC;IAAA,oEAAQ;IAAA,4DAAK;;;IACpD,yEAAwC;IAAA,uDAAoB;IAAA,4DAAK;;;IAAzB,0DAAoB;IAApB,+FAAoB;;;IAK5D,yEAAuC;IAAA,iEAAK;IAAA,4DAAK;;;IACjD,yEAAwC;IAAA,uDAAsB;IAAA,4DAAK;;;IAA3B,0DAAsB;IAAtB,iGAAsB;;;IAK9D,yEAAuC;IAAA,qEAAS;IAAA,4DAAK;;;IACrD,yEAAwC;IAAA,uDAAqB;IAAA,4DAAK;;;IAA1B,0DAAqB;IAArB,gGAAqB;;;IAK7D,oEAA4C;;;IAC5C,yEACE;IAAA,6EACE;IAAA,2EAAU;IAAA,iEAAM;IAAA,4DAAW;IAC7B,4DAAS;IACX,4DAAK;;;IAKL,oEAA4C;;;;IAC5C,yEACE;IAAA,6EACE;IADgE,gXAAuC;IACvG,2EAAU;IAAA,+DAAI;IAAA,4DAAW;IAC3B,4DAAS;IACX,4DAAK;;;IAKL,oEAA4C;;;;IAC5C,yEACE;IAAA,6EACE;IADiE,wWAAgC;IACjG,2EAAU;IAAA,uEAAY;IAAA,4DAAW;IACnC,4DAAS;IACX,4DAAK;;;IAGP,oEAA4D;;;IAC5D,oEAAkE;;;ADtD/D,MAAM,gBAAgB;IAO3B,YAAoB,cAA8B,EACzC,YAAuB,EACtB,MAAc;QAFJ,mBAAc,GAAd,cAAc,CAAgB;QACzC,iBAAY,GAAZ,YAAY,CAAW;QACtB,WAAM,GAAN,MAAM,CAAQ;QANxB,qBAAgB,GAAa,EAAE,CAAC;QAChC,eAAU,GAA+B,IAAI,0EAAkB,CAAS,EAAE,CAAC,CAAC;IAM5E,CAAC;IAED,QAAQ;IACR,CAAC;IAED,eAAe;QACb,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACnD,IAAI,CAAC,gBAAgB,GAAG,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;YACzG,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAS,OAAO,CAAC,CAAC;YAC1D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB,CAAC,MAAc;QACjC,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,qDAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,4FAAqB,EAAE;YAC9D,IAAI,EAAE,IAAI,CAAC,cAAc;YACzB,KAAK,EAAE,KAAK;YACZ,mCAAmC;YACnC,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACzC,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,QAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACnG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;gBACvC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBACb,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,MAAc;QACzB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,YAAY;QACV,IAAI,CAAC,cAAc,GAAG,qDAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEvC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,4FAAqB,EAAE;YAC9D,IAAI,EAAE,IAAI,CAAC,cAAc;SAI1B,CAAC,CAAC;QAEH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACzC,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBAC7D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBACb,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;gFArEU,gBAAgB;gGAAhB,gBAAgB;kEAKhB,wEAAY;;;;;QChBzB,yEACE;QAAA,4EAA4C;QAAzB,wIAAS,kBAAc,IAAC;QAAC,sEAAW;QAAA,4DAAS;QAChE,2EAEE;QACA,2EACE;QAAA,0GAAmD;QACnD,0GAAkE;QACpE,qEAAe;QAGf,2EACE;QAAA,0GAA+C;QAC/C,0GAA4D;QAC9D,qEAAe;QAGf,4EACE;QAAA,4GAAoD;QACpD,4GAAiE;QACnE,qEAAe;QAGf,4EACE;QAAA,4GAAiD;QACjD,4GAAmE;QACrE,qEAAe;QAGf,4EACE;QAAA,4GAAqD;QACrD,4GAAkE;QACpE,qEAAe;QAGf,6EACE;QAAA,4GAA4C;QAC5C,4GAIK;QACP,qEAAe;QAGf,6EACE;QAAA,4GAA4C;QAC5C,4GAIK;QACP,qEAAe;QAGf,6EACE;QAAA,4GAA4C;QAC5C,4GAIK;QACP,qEAAe;QAEf,6GAA4D;QAC5D,6GAAkE;QACpE,4DAAQ;QAER,gFAAoF;QACtF,4DAAM;;QAnEa,0DAAyB;QAAzB,sFAAyB;QA8DpB,2DAAiC;QAAjC,iGAAiC;QACpB,0DAA0B;QAA1B,kGAA0B;QAG9C,0DAA+B;QAA/B,kJAA+B;;6FDzDnC,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;wQAM0B,SAAS;kBAAjC,uDAAS;mBAAC,wEAAY;;;;;;;;;;;;;;AErBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AACN;;;;;;;AASpD,MAAM,qBAAqB;IAChC,YAA4C,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QACxD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,QAAQ;IACR,CAAC;IAED,iBAAiB,CAAC,QAAgB,EAAE,CAAQ;QACzC,IAAI,CAAC,MAAc,CAAC,QAAQ,CAAC,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;IACxE,CAAC;;0FAVU,qBAAqB,kEACZ,wEAAe;qGADxB,qBAAqB;QCVlC,wEAAqB;QAAA,wEAAa;QAAA,4DAAK;QACvC,wFACE;QAAA,uEACE;QAAA,qEACE;QAAA,wEACE;QAAA,iFACE;QAAA,4EAAW;QAAA,oFAAyB;QAAA,4DAAY;QAChD,2EACF;QAD4D,oJAAU,sBAAkB,UAAU,SAAS,IAAC;QAA1G,4DACF;QAAA,4DAAiB;QACnB,4DAAK;QACL,yEACE;QAAA,kFACE;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,4EAEF;QAFsD,qJAAU,sBAAkB,IAAI,SAAS,IAAC;QAA9F,4DAEF;QAAA,4DAAiB;QACnB,4DAAK;QACL,yEACE;QAAA,kFACE;QAAA,6EAAW;QAAA,mEAAO;QAAA,4DAAY;QAC9B,4EAEF;QAF2C,qJAAU,sBAAkB,SAAS,SAAS,IAAC;QAAxF,4DAEF;QAAA,4DAAiB;QACnB,4DAAK;QACL,yEACE;QAAA,kFACE;QAAA,6EAAW;QAAA,kFAAsB;QAAA,4DAAY;QAC7C,4EACF;QADqD,qJAAU,sBAAkB,mBAAmB,SAAS,IAAC;QAA5G,4DACF;QAAA,4DAAiB;QACnB,4DAAK;QACL,yEACE;QAAA,qFACE;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,4EACF;QADiD,qJAAU,sBAAkB,eAAe,SAAS,IAAC;QAApG,4DACF;QAAA,4DAAiB;QACnB,4DAAK;QAEP,4DAAK;QACP,4DAAO;QACT,4DAAqB;QACrB,yFACE;QAAA,6EAAoC;QAAA,kEAAM;QAAA,4DAAS;QACnD,8EAA6D;QAAA,iEAAK;QAAA,4DAAS;QAC7E,4DAAqB;;QApCK,0DAAyB;QAAzB,sFAAyB;QAMT,0DAAmB;QAAnB,gFAAmB;QAOnC,0DAAwB;QAAxB,qFAAwB;QAOxB,0DAAkC;QAAlC,+FAAkC;QAMlC,0DAA8B;QAA9B,2FAA8B;QASnC,0DAAyB;QAAzB,kFAAyB;;6FDhCjC,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;sBAEc,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEXrC;AAAA;AAAA;AAAA;AAAA;AAA2C;AAC0C;AACjD;;AAYpC,IAAK,KAKJ;AALD,WAAK,KAAK;IACR,6BAAM;IACN,iCAAI;IACJ,iCAAI;IACJ,mCAAK;AACP,CAAC,EALI,KAAK,KAAL,KAAK,QAKT;AAKM,MAAM,SAAS;IAMpB;QAJA,cAAS,GAAmC,EAAE,CAAC;QAC/C,WAAM,GAA8B,EAAE,CAAC;QAIrC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9G,IAAI,CAAC,EAAE,GAAG,gEAAS,CAAC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,IAAI,CAAC,EAAE,CAAC,SAAS,CACf,CAAC,MAAM,EAAC,EAAE,GAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAC,EACnC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,mEAAmE;QAC5F,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,0DAA0D;SAC9F,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAC,GAAW,EAAE,IAAY,EAAE,QAAoB;QACzD,IAAI,MAAM,GAAG,EAAE,KAAK,EAAE,+CAAM,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;QAC3C,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAa,EAAE,QAAgB,EAAE,QAAkB;QACpE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAS,CAAC,CAAC;IAChE,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAa;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAS,CAAC,CAAC;IACxD,CAAC;IAEO,SAAS,CAAC,MAAW;QAC3B,IAAI,MAAM,CAAC,KAAK,EAAE;YAChB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACrC;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,wEAAwE;YAC9G,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;SACnD;IACH,CAAC;;kEA5DU,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;6FAEP,SAAS;cAHrB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACvBD;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;AAOnC,MAAM,YAAY;IALzB;QAME,UAAK,GAAW,SAAS,CAAC;KAS3B;IAPC,QAAQ;QACN,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,eAAe;IAEf,CAAC;;wEATU,YAAY;4FAAZ,YAAY;QCPzB,sEAGE;QACA,4EAA2C;QAC3C,2EAA+B;QAEjC,4DAAM;;QAHS,0DAAe;QAAf,4EAAe;;6FDGjB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACA;AACT;AACgC;AACnB;AACc;AACH;AACE;AACkB;;AAoBpF,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAPJ;YACP,uEAAa;YACb,oEAAgB;YAChB,4FAAuB;YACvB,wEAAc;YACd,qEAAgB;SACjB;mIAIU,SAAS,mBAhBlB,2DAAY;QACZ,sFAAgB;QAChB,mFAAe;QACf,qFAAe;QACf,wGAAqB,aAGrB,uEAAa;QACb,oEAAgB;QAChB,4FAAuB;QACvB,wEAAc;QACd,qEAAgB;6FAKP,SAAS;cAlBrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,sFAAgB;oBAChB,mFAAe;oBACf,qFAAe;oBACf,wGAAqB;iBACtB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,4FAAuB;oBACvB,wEAAc;oBACd,qEAAgB;iBACjB;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AC7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;;;;;;AAOlD,MAAM,eAAe;IAE1B;QADS,UAAK,GAAW,EAAE,CAAC;IACZ,CAAC;IAEjB,QAAQ;IACR,CAAC;;8EALU,eAAe;+FAAf,eAAe;QCP5B,8EACE;QAAA,2EAAU;QAAA,2EAAgB;QAAA,4DAAW;QACrC,uEAAM;QAAA,uDAAS;QAAA,4DAAO;QACtB,qEAAoC;QAEpC,4EACE;QAAA,2EAAU;QAAA,sEAAW;QAAA,4DAAW;QAChC,uEAAO;QAAA,oEAAO;QAAA,4DAAO;QACvB,4DAAS;QAIT,6EACE;QAAA,4EAAU;QAAA,uEAAW;QAAA,4DAAW;QAChC,wEAAO;QAAA,uEAAU;QAAA,4DAAO;QAC1B,4DAAS;QACT,qFACE;QAAA,6EACE;QAAA,4EAAU;QAAA,yEAAa;QAAA,4DAAW;QAClC,wEAAO;QAAA,2EAAc;QAAA,4DAAO;QAC9B,4DAAS;QACT,6EACE;QAAA,4EAAU;QAAA,yEAAa;QAAA,4DAAW;QAClC,wEAAO;QAAA,6EAAgB;QAAA,4DAAO;QAChC,4DAAS;QACX,4DAAW;QAGX,6EACE;QAAA,4EAAU;QAAA,sEAAU;QAAA,4DAAW;QAC/B,wEAAO;QAAA,wEAAW;QAAA,4DAAO;QAC3B,4DAAS;QACT,qFACE;QAAA,6EACE;QAAA,4EAAU;QAAA,yEAAa;QAAA,4DAAW;QAClC,wEAAO;QAAA,0EAAa;QAAA,4DAAO;QAC7B,4DAAS;QACT,6EACE;QAAA,4EAAU;QAAA,yEAAa;QAAA,4DAAW;QAClC,wEAAO;QAAA,yFAA4B;QAAA,4DAAO;QAC5C,4DAAS;QACT,6EACE;QAAA,4EAAU;QAAA,qEAAS;QAAA,4DAAW;QAC9B,wEAAO;QAAA,sFAAyB;QAAA,4DAAO;QACzC,4DAAS;QACX,4DAAW;QAEX,6EACE;QAAA,4EAAU;QAAA,oEAAQ;QAAA,4DAAW;QAC/B,4DAAS;QACT,6EACE;QAAA,4EAAU;QAAA,iEAAK;QAAA,4DAAW;QAC5B,4DAAS;QACX,4DAAc;;;;QAnDN,0DAAS;QAAT,0EAAS;QAUI,0DAAoC;QAApC,kFAAoC;QAgBpC,2DAAqC;QAArC,kFAAqC;;6FDrB7C,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;sCAEU,KAAK;kBAAb,mDAAK;;;;;;;;;;;;;;AERR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgF;AAEjC;AAGwB;;;;;AAIvE,IAAI,EAAE,GAAG,QAAQ,CAAC;AAClB,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AAOpB,MAAM,eAAe;IAK1B,YAAoB,KAAqB,EAAU,MAAc,EACvD,SAAoB,EAAU,cAA8B;QADlD,UAAK,GAAL,KAAK,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QACvD,cAAS,GAAT,SAAS,CAAW;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAL7D,WAAM,GAAW,IAAI,qDAAM,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QACtE,aAAQ,GAAW,EAAE,CAAC;IAK9B,CAAC;IAED,QAAQ;QAKN,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAW,EAAE,EAAE;YAC/C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;YACnC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBAC9D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACvB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,eAAe;QACb,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACnC,IAAI,CAAC,cAAc,EAAE,CAAC;YAEtB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,wEAAoB,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,IAAS;gBACjF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAE5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,EAAE;YACvC,2BAA2B;YAC3B,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,IAAI;YACZ,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YAC9B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;YACvC,KAAK,EAAE,CAAC;oBACN,WAAW,EAAE,KAAK;oBAClB,UAAU,EAAE,CAAC;oBACb,GAAG,EAAE,GAAG;oBACR,GAAG,EAAE,CAAC;oBACN,QAAQ,EAAE,CAAC;oBACX,iBAAiB,EAAE,GAAG;iBACvB,CAAC;YACF,KAAK,EAAE,CAAC;oBACN,WAAW,EAAE,KAAK;oBAClB,UAAU,EAAE,CAAC;oBACb,iBAAiB,EAAE,GAAG;iBACvB,CAAC;SACH,CAAC,CAAC;QAGH,6FAA6F;QAC7F,8BAA8B;QAC9B,wBAAwB;QACxB,iCAAiC;QACjC,oCAAoC;QACpC,aAAa;QACb,mBAAmB;QACnB,oBAAoB;QACpB,OAAO;QACP,aAAa;QACb,mBAAmB;QACnB,gBAAgB;QAChB,OAAO;QACP,iCAAiC;QACjC,KAAK;IACP,CAAC;IAED,cAAc,CAAC,IAAS;QACtB,IAAI,IAAI,GAAQ,CAAC;gBACf,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,uGAAuG;gBACpH,MAAM,EAAE;oBACN,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAI;oBAC3C,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBACzC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBACzC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBACzC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBACzC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBACzC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;oBACzC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;iBAC1C;aACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAEvB;;;;;;;;UAQE;QAEF,0DAA0D;QAC1D,+CAA+C;QAC/C,wCAAwC;QACxC,uCAAuC;QACvC,qCAAqC;QACrC,+CAA+C;QAC/C,+CAA+C;QAC/C,+CAA+C;QAC/C,8CAA8C;QAC9C,MAAM;QAEN,2DAA2D;QAE3D,yBAAyB;QACzB,MAAM;QACN,yBAAyB;QACzB,uBAAuB;QACvB,sBAAsB;QACtB,yBAAyB;QACzB,OAAO;QACP,SAAS;QAET,qDAAqD;IACvD,CAAC;IAED,UAAU,CAAC,GAAW;QACpB,MAAM,IAAI,GAAmB,QAAQ,CAAC,IAAI,CAAC;QAC3C,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;QACtB,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;QACjB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;;8EA3IU,eAAe;+FAAf,eAAe;QCjB5B,yEACE;QAAA,qEAAI;QAAA,0EAA2B;QAAA,uDAAoB;QAAA,4DAAO;QACxD,uDAKF;QAAA,4DAAK;QAEL,yEACE;QAAA,oEAEF;QAAA,4DAAM;QACR,4DAAM;;QAZ2B,0DAAoB;QAApB,8FAAoB;QACjD,0DAKF;QALE,+QAKF;;6FDUW,eAAe;cAN3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;8UAGU,MAAM;kBAAd,mDAAK;;;;;;;;;;;;;;AElBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACkB;AACE;AACN;AACA;AACE;AACM;AACN;AACO;AACT;AACG;;AAE1D,MAAM,kBAAkB,GAAG;IACzB,wEAAe;IACf,oEAAa;IACb,0EAAgB;IAChB,oEAAa;IACb,sEAAc;IACd,8EAAkB;IAClB,wEAAe;IACf,+EAAkB;IAClB,sEAAc;IACd,wEAAa;CACd,CAAC;AAMK,MAAM,cAAc;;6FAAd,cAAc;sJAAd,cAAc,kBAHhB,CAAC,kBAAkB,CAAC,EAb7B,wEAAe;QACf,oEAAa;QACb,0EAAgB;QAChB,oEAAa;QACb,sEAAc;QACd,8EAAkB;QAClB,wEAAe;QACf,+EAAkB;QAClB,sEAAc;QACd,wEAAa;mIAOF,cAAc,cAhBzB,wEAAe;QACf,oEAAa;QACb,0EAAgB;QAChB,oEAAa;QACb,sEAAc;QACd,8EAAkB;QAClB,wEAAe;QACf,+EAAkB;QAClB,sEAAc;QACd,wEAAa,aATb,wEAAe;QACf,oEAAa;QACb,0EAAgB;QAChB,oEAAa;QACb,sEAAc;QACd,8EAAkB;QAClB,wEAAe;QACf,+EAAkB;QAClB,sEAAc;QACd,wEAAa;6FAOF,cAAc;cAJ1B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,kBAAkB,CAAC;gBAC7B,OAAO,EAAE,CAAC,kBAAkB,CAAC;aAC9B;;;;;;;;;;;;;;AC5BD;AAAA;AAAO,MAAM,MAAM;IAUjB,YAAY,QAAgB,EAAE,EAAU,EAAE,OAAe,EAAE,SAAiB,EAAE,QAAgB,EAC5F,iBAAyB,EAAE,aAAuB,EAAE,eAAuB;QAC3E,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,MAAW;QAC7B,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,QAAkB,IAAI,EAAE,EAC/C,MAAM,CAAC,EAAE,IAAI,KAAK,EAClB,MAAM,CAAC,OAAO,IAAI,KAAK,EACvB,MAAM,CAAC,SAAS,IAAI,CAAC,EACrB,MAAM,CAAC,QAAQ,IAAI,KAAK,EACxB,MAAM,CAAC,iBAAiB,IAAI,IAAI,EAChC,MAAM,CAAC,aAAa,IAAI,IAAI,EAC5B,MAAM,CAAC,eAAe,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,MAAc;QAC1B,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,QAAkB,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,EACrG,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;IAC5E,CAAC;CACF;;;;;;;;;;;;;AC5CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACmB;AACH;;;AAEvE,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sFAAgB;KAC5B;IACD;QACE,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,mFAAe;KAC3B;CACF,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACG;AACK;;;AAQ5C,MAAM,cAAc;IAGzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAClC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,UAAU;QACR,6FAA6F;QAC7F,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAW,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC;IACxD,CAAC;IAED,SAAS,CAAC,QAAgB;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,IAAI,CAAC,IAAI,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC;IACjE,CAAC;IAED,YAAY,CAAC,QAAgB,EAAE,MAAc;QAC3C,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,gBAAgB,GAAG,QAAQ,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAS,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAC5F,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAS,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAC5F,CAAC;IAEO,WAAW,CAAC,KAAwB;QAC1C,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,kEAAkE;YAClE,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1D;aAAM;YACL,sDAAsD;YACtD,6DAA6D;YAC7D,OAAO,CAAC,KAAK,CACX,yBAAyB,KAAK,CAAC,MAAM,IAAI;gBACzC,aAAa,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;SAC/B;QACD,yDAAyD;QACzD,OAAO,uDAAU,CACf,iDAAiD,CAAC,CAAC;IACvD,CAAC;;4EAzCU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main-es2015.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Server } from './../../models/server';\nimport { ServersService } from './../../services/servers.service';\nimport { ServerConfigComponent } from './../server-config/server-config.component';\n\nimport { AfterViewInit, Component, ViewChild, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ServerComponent } from '../server/server.component';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements AfterViewInit, OnInit {\n  oldServer: Server;\n  selectedServer: Server;\n  displayedColumns: string[] = [];\n  dataSource: MatTableDataSource<Server> = new MatTableDataSource<Server>([]);\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private serversService: ServersService,\n    public configDialog: MatDialog,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.serversService.getServers().subscribe(servers => {\n      this.displayedColumns = ['agent_id', 'ip', 'details', 'cpu_count', 'platform', 'delete', 'edit', 'watch']\n      this.dataSource = new MatTableDataSource<Server>(servers);\n      this.dataSource.paginator = this.paginator;\n    });\n  }\n\n  openServerEditDialog(server: Server) {\n    let self = this;\n    this.oldServer = server;\n    this.selectedServer = Server.clone(server);\n    const dialogRef = this.configDialog.open(ServerConfigComponent, {\n      data: this.selectedServer,\n      width: '30%',\n      // minHeight: 'calc(100vh - 90px)',\n      height: 'auto'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.serversService.updateServer(this.oldServer.agent_id as string, this.selectedServer).then(data => {\n          console.log(data);\n          this.oldServer = this.selectedServer;\n        }).catch(err => {\n          console.log('error=', err);\n        });\n      }\n    });\n  }\n\n  viewBtnClick(server: Server) {\n    this.router.navigateByUrl('/server?agent_id=' + server.agent_id);\n  }\n\n  addNewServer() {\n    this.selectedServer = Server.clone({});\n\n    const dialogRef = this.configDialog.open(ServerConfigComponent, {\n      data: this.selectedServer,\n      // width: '50%',\n      // minHeight: 'calc(100vh - 90px)',\n      // height: 'auto'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.serversService.addServer(this.selectedServer).then(data => {\n          console.log(data);   \n        }).catch(err => {\n          console.log('error=', err);\n        });\n      }\n    });\n  }\n}","<!-- <div *ngFor=\"let server of servers\">\n  <app-server  [server]=\"server\">\n  </app-server>\n</div> -->\n\n<div class=\"mat-elevation-z8\">\n  <button mat-button (click)=\"addNewServer()\">+Add Server</button>\n  <table mat-table [dataSource]=\"dataSource\">\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"agent_id\">\n      <th mat-header-cell *matHeaderCellDef> Server </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.agent_id}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"ip\">\n      <th mat-header-cell *matHeaderCellDef> IP </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.ip}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"details\">\n      <th mat-header-cell *matHeaderCellDef> Details </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.details}} </td>\n    </ng-container>\n\n    <!-- Weight Column -->\n    <ng-container matColumnDef=\"cpu_count\">\n      <th mat-header-cell *matHeaderCellDef> CPUs </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.cpu_count}} </td>\n    </ng-container>\n\n    <!-- Symbol Column -->\n    <ng-container matColumnDef=\"platform\">\n      <th mat-header-cell *matHeaderCellDef> Platform </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.platform}} </td>\n    </ng-container>\n\n    <!-- Delete Column -->\n    <ng-container matColumnDef=\"delete\">\n      <th mat-header-cell *matHeaderCellDef> </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" aria-label=\"Detach the server\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <!-- Edit Column -->\n    <ng-container matColumnDef=\"edit\">\n      <th mat-header-cell *matHeaderCellDef> </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" aria-label=\"Edit the server\" (click)=\"openServerEditDialog(element)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <!-- View Column -->\n    <ng-container matColumnDef=\"watch\">\n      <th mat-header-cell *matHeaderCellDef> </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" aria-label=\"Watch the server\" (click)=\"viewBtnClick(element);\">\n          <mat-icon>insert_chart</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n</div>","import { Component, Inject, OnInit, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Server } from './../../models/server';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-server-config',\n  templateUrl: './server-config.component.html',\n  styleUrls: ['./server-config.component.css']\n})\nexport class ServerConfigComponent implements OnInit {\n  constructor(@Inject(MAT_DIALOG_DATA) public server: Server) {\n    this.server = server;\n  }\n\n  ngOnInit(): void {\n  }\n\n  setServerProperty(property: string, e: Event) {\n    (this.server as any)[property] = (e.target as HTMLInputElement).value;\n  }\n}\n","<h2 mat-dialog-title>Config Server</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <form>\n    <ol>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>Unique Name Of the Server</mat-label>\n          <input matInput [value]=\"server.agent_id\" disabled=\"true\" (change)=\"setServerProperty('agent_id', $event)\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>IP Address(IPv4)</mat-label>\n          <input matInput disabled=\"true\" [value]=\"server.ip\" (change)=\"setServerProperty('ip', $event)\"\n            resizeToFitContent=\"true\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>Details</mat-label>\n          <input matInput [value]=\"server.details\" (change)=\"setServerProperty('details', $event)\"\n            resizeToFitContent=\"true\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>Periodic Data Interval</mat-label>\n          <input matInput [value]=\"server.stats_interval_ms\" (change)=\"setServerProperty('stats_interval_ms', $event)\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Process to watch</mat-label>\n          <input matInput [value]=\"server.watch_process\" (change)=\"setServerProperty('watch_process', $event)\">\n        </mat-form-field>\n      </li>\n\n    </ol>\n  </form>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Apply</button>\n</mat-dialog-actions>","import { Injectable } from '@angular/core';\nimport { webSocket, WebSocketSubject, WebSocketSubjectConfig } from \"rxjs/webSocket\";\nimport { v4 as uuidV4 } from \"uuid\";\n\n// https://stackoverflow.com/questions/60952255/connecting-a-websocket-in-angular\n\ninterface CallbackDictionary<T> {\n  [Key: string]: T;\n}\n\ninterface EventDictionary<T> {\n  [Key: string]: T;\n}\n\nenum Event {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WsService {\n  ws: WebSocketSubject<string>;\n  callbacks: CallbackDictionary<() => void> = {};\n  events: EventDictionary<Function> = {};\n  host: string;\n\n  constructor() {\n    this.callbacks = {};\n    this.events = {};\n    console.log(window.location.host);\n    this.host = 'ws://' + ((window.location.host === 'localhost:4200') ? 'localhost:2600' : window.location.host);\n    this.ws = webSocket(this.host + '/youknow/ws');\n    this.callbacks = {};\n    this.events = {};\n\n    this.ws.subscribe(\n      (packet)=> {this.onMessage(packet)},\n      err => console.log(err), // Called if at any point WebSocket API signals some kind of error.\n      () => { console.log('complete'); } // Called when connection is closed (for whatever reason).\n    );\n  }\n\n  /**\n   * @description send message and receive a response over callback\n   * @param data \n   * @param callback \n   */\n  public send(cmd: string, data: string, callback: () => void) {\n    let packet = { token: uuidV4(), cmd, data }\n    this.ws.next(data);\n    this.callbacks[packet.token] = callback;\n  }\n\n  /**\n   * @description Attach permanent event\n   * @param data \n   * @param callback \n   */\n  public attachEvent(event: string, agent_id: string, callback: Function) {\n    this.events[event] = callback;\n    this.ws.next({ event, agent_id, action: 'subscribe' } as any);\n  }\n\n  /**\n   * @description Attach permanent event\n   * @param data \n   * @param callback \n   */\n  public detachEvent(event: string) {\n    delete this.events[event];\n    this.ws.next({ event, action: 'unsubscribe' } as any);\n  }\n\n  private onMessage(packet: any) {\n    if (packet.token) {\n      this.callbacks[packet.token].call(packet.data);\n      delete this.callbacks[packet.token];\n    } else if (this.events[packet.event]) { // If its not simple function call then it must be event if not detached\n      this.events[packet.event].call(null, packet.data);\n    }\n  }\n}\n","import { Component } from '@angular/core';\ndeclare var google: any;\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title: string = 'YouKnow';\n\n  ngOnInit(): void {\n    google.charts.load('current', { packages: ['corechart', 'bar'] });\n  }\n\n  ngAfterViewInit(): void {\n\n  }\n}\n","<div>\n\n  \n  <!-- <app-servers></app-servers> -->\n  <app-nav-bar [title]='title'></app-nav-bar>\n  <router-outlet></router-outlet>\n  \n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ServersComponent } from './components/servers/servers.component';\nimport { ServerComponent } from './components/server/server.component';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { ServerConfigComponent } from './components/server-config/server-config.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ServersComponent,\n    ServerComponent,\n    NavBarComponent,\n    ServerConfigComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n  @Input() title: string = '';\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar>\n  <mat-icon>self_improvement</mat-icon>\n  <span>{{title}}</span>\n  <span class=\"example-spacer\"></span>\n  <!-- Server Menu -->\n  <button mat-button aria-label=\"Servers\">\n    <mat-icon>desktop_mac</mat-icon>\n    <span> Servers</span>\n  </button>\n\n  <!-- Operations Menu -->\n\n  <button mat-button [matMenuTriggerFor]=\"operationsMenu\" aria-label=\"Operations\">\n    <mat-icon>engineering</mat-icon>\n    <span> Operations</span>\n  </button>\n  <mat-menu #operationsMenu=\"matMenu\">\n    <button mat-menu-item>\n      <mat-icon>shutter_speed</mat-icon>\n      <span> Watch Realtime</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>switch_camera</mat-icon>\n      <span> Compare Realtime</span>\n    </button>\n  </mat-menu>\n\n  <!-- Performance Menu -->\n  <button mat-button [matMenuTriggerFor]=\"performanceMenu\" aria-label=\"Performance\">\n    <mat-icon>auto_graph</mat-icon>\n    <span> Performance</span>\n  </button>\n  <mat-menu #performanceMenu=\"matMenu\">\n    <button mat-menu-item>\n      <mat-icon>shutter_speed</mat-icon>\n      <span> Single Server</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>switch_camera</mat-icon>\n      <span> Comparison between 2 Servers</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>analytics</mat-icon>\n      <span> Performance Deep Analysis</span>\n    </button>\n  </mat-menu>\n\n  <button mat-icon-button class=\"example-icon favorite-icon\" aria-label=\"Example icon-button with heart icon\">\n    <mat-icon>favorite</mat-icon>\n  </button>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with share icon\">\n    <mat-icon>share</mat-icon>\n  </button>\n</mat-toolbar>\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Server } from './../../models/server';\nimport { WsService } from './../../services/ws.service';\nimport { ServersService } from './../../services/servers.service';\nimport * as EventTypes from './../../../assets/common/eventTypes.json';\nimport { ChartModel } from './../../models/chartModel';\ndeclare var google: any;\ndeclare var SilverJs: any;\nvar SJ = SilverJs;\nvar Chart = SilverJs.Chart;\n@Component({\n  selector: 'app-server',\n  templateUrl: './server.component.html',\n  styleUrls: ['./server.component.css']\n})\n\nexport class ServerComponent implements OnInit {\n  @Input() server: Server = new Server('NOC', '', '12', 1, '212', 22, [], 3333);\n  private agent_id: string = '';\n  private cpuChart: any;\n\n  constructor(private route: ActivatedRoute, private router: Router,\n    private wsService: WsService, private serversService: ServersService) {\n  }\n\n  ngOnInit(): void {\n\n\n\n\n    this.route.queryParams.subscribe((params: any) => {\n      this.agent_id = params['agent_id'];\n      this.serversService.getServer(this.agent_id).subscribe(server => {\n        this.server = server;\n      });\n    });\n  }\n\n  ngAfterViewInit() {\n    let self = this;\n\n    google.charts.setOnLoadCallback(() => {\n      this.createCPUGraph();\n\n      this.wsService.attachEvent(EventTypes.OS_UPDATE, this.agent_id, function (data: any) {\n        console.log(data);\n        self.updateCPUGraph(data);\n\n      });\n    });\n  }\n\n  createCPUGraph() {\n    this.cpuChart = new Chart(\"cpuChartDiv\", {\n      // width: 300, height: 160,\n      border: 0.001,\n      bevel: false,\n      shadow: true,\n      cornerRadius: [12, 12, 12, 12],\n      titles: [{ text: \"CPU\", fontSize: 10 }],\n      axesY: [{\n        tickEnabled: false,\n        tickLength: 1,\n        max: 100,\n        min: 0,\n        interval: 2,\n        axisLineThickness: 0.2,\n      }],\n      axesX: [{\n        tickEnabled: false,\n        tickLength: 1,\n        axisLineThickness: 0.2,\n      }]\n    });\n\n\n    // this.cpuChart = new google.visualization.BarChart(document.getElementById('cpuChartDiv'));\n    // this.cpuChart.__options = {\n    //   title: 'CPU Usage',\n    //   chartArea: { width: '90%' },\n    //   colors: ['#b0120a', '#ffab91'],\n    //   vAxis: {\n    //     minValue: 0,\n    //     maxValue: 100\n    //   },\n    //   hAxis: {\n    //     minValue: 0,\n    //     ticks: []\n    //   },\n    //   legend: { position: \"none\" }\n    // };\n  }\n\n  updateCPUGraph(data: any) {\n    var data: any = [{\n      plotAs: 'bar',\n      tooltipText: \"<b style='color:{color};'>{xLabel}</b>:{yValue}%<br>user cpu time (or) % CPU time spent in user space\",\n      points: [\n        { xLabel: 'ST', yValue: data.sys.cpu_st,  },\n        { xLabel: 'SI', yValue: data.sys.cpu_si },\n        { xLabel: 'HI', yValue: data.sys.cpu_hi },\n        { xLabel: 'WA', yValue: data.sys.cpu_wa },\n        { xLabel: 'ID', yValue: data.sys.cpu_id },\n        { xLabel: 'NI', yValue: data.sys.cpu_ni },\n        { xLabel: 'SY', yValue: data.sys.cpu_sy },\n        { xLabel: 'US', yValue: data.sys.cpu_us },\n      ]\n    }];\n\n    this.cpuChart.setData(data);\n    this.cpuChart.render();\n\n    /*us: \n    sy: system cpu time (or) % CPU time spent in kernel space\n    ni: user nice cpu time (or) % CPU time spent on low priority processes\n    id: idle cpu time (or) % CPU time spent idle\n    wa: io wait cpu time (or) % CPU time spent in wait (on disk)\n    hi: hardware irq (or) % CPU time spent servicing/handling hardware interrupts\n    si: software irq (or) % CPU time spent servicing/handling software interrupts\n    st: steal time - - % CPU time in involuntary wait by virtual cpu while hypervisor is servicing another processor (or) % CPU time stolen from a virtual machine\n    */\n\n    // var chartData = google.visualization.arrayToDataTable([\n    //   [\"Element\", \"Density\", { role: \"style\" }],\n    //   [\"US\", data.sys.cpu_us, \"#b87333\"],\n    //   [\"SY\", data.sys.cpu_si, \"silver\"],\n    //   [\"NI\", data.sys.cpu_ni, \"gold\"],\n    //   [\"ID\", data.sys.cpu_id, \"color: #e5e4e2\"],\n    //   [\"WA\", data.sys.cpu_wa, \"color: #e5e4e2\"],\n    //   [\"HI\", data.sys.cpu_hi, \"color: #e5e4e2\"],\n    //   [\"SI\", data.sys.cpu_si, \"color: #e5e4e2\"]\n    // ]);\n\n    // var view = new google.visualization.DataView(chartData);\n\n    // view.setColumns([0, 1,\n    //   {\n    //     calc: \"stringify\",\n    //     sourceColumn: 1,\n    //     type: \"string\",\n    //     role: \"annotation\"\n    //   },\n    //   2]);\n\n    // this.cpuChart.draw(view, this.cpuChart.__options);\n  }\n\n  loadScript(url: string) {\n    const body = <HTMLDivElement>document.body;\n    const script = document.createElement('script');\n    script.innerHTML = '';\n    script.src = url;\n    script.async = false;\n    script.defer = true;\n    body.appendChild(script);\n  }\n}\n","<div class=\"container\">\n  <h1><span class=\"header1 blue\">{{server.agent_id}} </span>\n    | IP: {{server.ip}}\n    | CPU: {{server.cpu_count}}\n    | PLATFORM: {{server.platform}}\n    | Refresh Interval: {{server.stats_interval_ms}}\n    | Last Updated: {{server.last_updated_ts}}\n  </h1>\n\n  <div id=\"cpuChartDiv\" style=\"width: 400px; height: 200px;\">\n    <img src=\"assets/image/icons/info-24px.svg\" class=\"infoIcon\">\n  \n  </div>\n</div>\n\n\n<!-- <h2>{{server.watch_process}}</h2> -->","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport { BrowserModule } from '@angular/platform-browser';\n\nconst MaterialComponents = [\n  MatButtonModule,\n  MatIconModule,\n  MatToolbarModule,\n  MatMenuModule,\n  MatTableModule,\n  MatPaginatorModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatInputModule,\n  BrowserModule\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents],\n})\nexport class MaterialModule { }\n","export class Server {\n  agent_id?: string;\n  ip: string;\n  details: string;\n  cpu_count: number;\n  platform: string;\n  stats_interval_ms: number;\n  watch_process: string[];\n  last_updated_ts: number;\n\n  constructor(agent_id: string, ip: string, details: string, cpu_count: number, platform: string,\n    stats_interval_ms: number, watch_process: string[], last_updated_ts: number) {\n    this.agent_id = agent_id;\n    this.ip = ip;\n    this.details = details;\n    this.cpu_count = cpu_count;\n    this.platform = platform;\n    this.stats_interval_ms = stats_interval_ms;\n    this.watch_process = watch_process;\n    this.last_updated_ts = last_updated_ts;\n  }\n\n  /**\n   * @description Clone this server object\n   */\n  public static clone(server: any) {\n    return new Server(server.agent_id as string || '',\n      server.ip || 'N/A',\n      server.details || 'N/A',\n      server.cpu_count || 0,\n      server.platform || 'N/A',\n      server.stats_interval_ms || 5000,\n      server.watch_process || '[]',\n      server.last_updated_ts || 0);\n  }\n\n  /**\n   * @description Update reference of this server with the updated data\n   * @param server \n   */\n  public update(server: Server) {\n    return new Server(this.agent_id as string, server.details, server.ip, server.cpu_count, server.platform,\n      server.stats_interval_ms, server.watch_process, server.last_updated_ts);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ServersComponent } from './components/servers/servers.component';\nimport { ServerComponent } from './components/server/server.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ServersComponent\n  },\n  {\n    path: 'server',\n    component: ServerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Server } from './../models/server';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServersService {\n  host: string;\n\n  constructor(private http: HttpClient) {\n    this.host = window.location.protocol + '//' + ((window.location.host === 'localhost:4200') ? 'localhost:2600' : window.location.host);\n    console.log(this.host);\n  }\n\n  getServers(): Observable<Server[]> {\n    // https://stackoverflow.com/questions/49297680/angular-5-get-host-name-and-app-name-from-url\n    return this.http.get<Server[]>(this.host + '/agents');\n  }\n\n  getServer(agent_id: string): Observable<Server> {\n    return this.http.get<Server>(this.host + '/agent/' + agent_id);\n  }\n  \n  updateServer(agent_id: string, server: Server) {\n    let url = this.host + '/agent/update/' + agent_id;\n    return this.http.post<Server>(url, server).pipe(catchError(this.handleError)).toPromise();\n  }\n\n  addServer(server: Server) {\n    let url = this.host + '/agent/add';\n    return this.http.post<Server>(url, server).pipe(catchError(this.handleError)).toPromise();\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}