{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/components/servers/servers.component.ts","webpack:///src/app/components/servers/servers.component.html","webpack:///src/app/components/server-config/server-config.component.ts","webpack:///src/app/components/server-config/server-config.component.html","webpack:///src/app/services/ws.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/nav-bar/nav-bar.component.ts","webpack:///src/app/components/nav-bar/nav-bar.component.html","webpack:///src/app/components/server/server.component.ts","webpack:///src/app/components/server/server.component.html","webpack:///src/app/material/material.module.ts","webpack:///src/app/models/server.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/services/servers.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","ServersComponent","serversService","configDialog","router","displayedColumns","dataSource","getServers","subscribe","servers","paginator","server","self","oldServer","selectedServer","clone","dialogRef","open","data","width","height","afterClosed","result","updateServer","agent_id","then","console","log","err","navigateByUrl","addServer","addNewServer","selector","templateUrl","styleUrls","ServerConfigComponent","property","e","target","value","setServerProperty","$event","Event","WsService","callbacks","events","window","location","host","ws","packet","onMessage","cmd","callback","token","next","event","action","call","providedIn","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","NavBarComponent","ServerComponent","route","wsService","queryParams","params","getServer","attachEvent","MaterialComponents","MaterialModule","exports","Server","ip","details","cpu_count","platform","stats_interval_ms","watch_process","last_updated_ts","routes","path","component","AppRoutingModule","forRoot","ServersService","http","protocol","get","url","post","pipe","handleError","toPromise","error","ErrorEvent","message","status","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Server } from './../../models/server';\nimport { ServersService } from './../../services/servers.service';\nimport { ServerConfigComponent } from './../server-config/server-config.component';\n\nimport { AfterViewInit, Component, ViewChild, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ServerComponent } from '../server/server.component';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements AfterViewInit, OnInit {\n  oldServer: Server;\n  selectedServer: Server;\n  displayedColumns: string[] = [];\n  dataSource: MatTableDataSource<Server> = new MatTableDataSource<Server>([]);\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private serversService: ServersService,\n    public configDialog: MatDialog,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.serversService.getServers().subscribe(servers => {\n      this.displayedColumns = ['agent_id', 'ip', 'details', 'cpu_count', 'platform', 'delete', 'edit', 'watch']\n      this.dataSource = new MatTableDataSource<Server>(servers);\n      this.dataSource.paginator = this.paginator;\n    });\n  }\n\n  openServerEditDialog(server: Server) {\n    let self = this;\n    this.oldServer = server;\n    this.selectedServer = Server.clone(server);\n    const dialogRef = this.configDialog.open(ServerConfigComponent, {\n      data: this.selectedServer,\n      width: '30%',\n      // minHeight: 'calc(100vh - 90px)',\n      height: 'auto'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.serversService.updateServer(this.oldServer.agent_id as string, this.selectedServer).then(data => {\n          console.log(data);\n          this.oldServer = this.selectedServer;\n        }).catch(err => {\n          console.log('error=', err);\n        });\n      }\n    });\n  }\n\n  viewBtnClick(server: Server) {\n    this.router.navigateByUrl('/server?agent_id=' + server.agent_id);\n  }\n\n  addNewServer() {\n    this.selectedServer = Server.clone({});\n\n    const dialogRef = this.configDialog.open(ServerConfigComponent, {\n      data: this.selectedServer,\n      // width: '50%',\n      // minHeight: 'calc(100vh - 90px)',\n      // height: 'auto'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.serversService.addServer(this.selectedServer).then(data => {\n          console.log(data);   \n        }).catch(err => {\n          console.log('error=', err);\n        });\n      }\n    });\n  }\n}","<!-- <div *ngFor=\"let server of servers\">\n  <app-server  [server]=\"server\">\n  </app-server>\n</div> -->\n\n<div class=\"mat-elevation-z8\">\n  <button mat-button (click)=\"addNewServer()\">+Add Server</button>\n  <table mat-table [dataSource]=\"dataSource\">\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"agent_id\">\n      <th mat-header-cell *matHeaderCellDef> Server </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.agent_id}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"ip\">\n      <th mat-header-cell *matHeaderCellDef> IP </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.ip}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"details\">\n      <th mat-header-cell *matHeaderCellDef> Details </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.details}} </td>\n    </ng-container>\n\n    <!-- Weight Column -->\n    <ng-container matColumnDef=\"cpu_count\">\n      <th mat-header-cell *matHeaderCellDef> CPUs </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.cpu_count}} </td>\n    </ng-container>\n\n    <!-- Symbol Column -->\n    <ng-container matColumnDef=\"platform\">\n      <th mat-header-cell *matHeaderCellDef> Platform </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.platform}} </td>\n    </ng-container>\n\n    <!-- Delete Column -->\n    <ng-container matColumnDef=\"delete\">\n      <th mat-header-cell *matHeaderCellDef> </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" aria-label=\"Detach the server\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <!-- Edit Column -->\n    <ng-container matColumnDef=\"edit\">\n      <th mat-header-cell *matHeaderCellDef> </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" aria-label=\"Edit the server\" (click)=\"openServerEditDialog(element)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <!-- View Column -->\n    <ng-container matColumnDef=\"watch\">\n      <th mat-header-cell *matHeaderCellDef> </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" aria-label=\"Watch the server\" (click)=\"viewBtnClick(element);\">\n          <mat-icon>insert_chart</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n</div>","import { Component, Inject, OnInit, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Server } from './../../models/server';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-server-config',\n  templateUrl: './server-config.component.html',\n  styleUrls: ['./server-config.component.css']\n})\nexport class ServerConfigComponent implements OnInit {\n  constructor(@Inject(MAT_DIALOG_DATA) public server: Server) {\n    this.server = server;\n  }\n\n  ngOnInit(): void {\n  }\n\n  setServerProperty(property: string, e: Event) {\n    (this.server as any)[property] = (e.target as HTMLInputElement).value;\n  }\n}\n","<h2 mat-dialog-title>Config Server</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <form>\n    <ol>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>Unique Name Of the Server</mat-label>\n          <input matInput [value]=\"server.agent_id\" disabled=\"true\" (change)=\"setServerProperty('agent_id', $event)\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>IP Address(IPv4)</mat-label>\n          <input matInput disabled=\"true\" [value]=\"server.ip\" (change)=\"setServerProperty('ip', $event)\"\n            resizeToFitContent=\"true\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>Details</mat-label>\n          <input matInput [value]=\"server.details\" (change)=\"setServerProperty('details', $event)\"\n            resizeToFitContent=\"true\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field>\n          <mat-label>Periodic Data Interval</mat-label>\n          <input matInput [value]=\"server.stats_interval_ms\" (change)=\"setServerProperty('stats_interval_ms', $event)\">\n        </mat-form-field>\n      </li>\n      <li class=\"nostyle\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Process to watch</mat-label>\n          <input matInput [value]=\"server.watch_process\" (change)=\"setServerProperty('watch_process', $event)\">\n        </mat-form-field>\n      </li>\n\n    </ol>\n  </form>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Apply</button>\n</mat-dialog-actions>","import { Injectable } from '@angular/core';\nimport { webSocket, WebSocketSubject, WebSocketSubjectConfig } from \"rxjs/webSocket\";\nimport { v4 as uuidV4 } from \"uuid\";\n\n// https://stackoverflow.com/questions/60952255/connecting-a-websocket-in-angular\n\ninterface CallbackDictionary<T> {\n  [Key: string]: T;\n}\n\ninterface EventDictionary<T> {\n  [Key: string]: T;\n}\n\nenum Event {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WsService {\n  ws: WebSocketSubject<string>;\n  callbacks: CallbackDictionary<() => void> = {};\n  events: EventDictionary<Function> = {};\n  host: string;\n\n  constructor() {\n    this.callbacks = {};\n    this.events = {};\n    console.log(window.location.host);\n    this.host = 'ws://' + ((window.location.host === 'localhost:4200') ? 'localhost:2600' : window.location.host);\n    this.ws = webSocket(this.host + '/youknow/ws');\n    this.callbacks = {};\n    this.events = {};\n\n    this.ws.subscribe(\n      (packet)=> {this.onMessage(packet)},\n      err => console.log(err), // Called if at any point WebSocket API signals some kind of error.\n      () => { console.log('complete'); } // Called when connection is closed (for whatever reason).\n    );\n  }\n\n  /**\n   * @description send message and receive a response over callback\n   * @param data \n   * @param callback \n   */\n  public send(cmd: string, data: string, callback: () => void) {\n    let packet = { token: uuidV4(), cmd, data }\n    this.ws.next(data);\n    this.callbacks[packet.token] = callback;\n  }\n\n  /**\n   * @description Attach permanent event\n   * @param data \n   * @param callback \n   */\n  public attachEvent(event: string, agent_id: string, callback: Function) {\n    this.events[event] = callback;\n    this.ws.next({ event, agent_id, action: 'subscribe' } as any);\n  }\n\n  /**\n   * @description Attach permanent event\n   * @param data \n   * @param callback \n   */\n  public detachEvent(event: string) {\n    delete this.events[event];\n    this.ws.next({ event, action: 'unsubscribe' } as any);\n  }\n\n  private onMessage(packet: any) {\n    if (packet.token) {\n      this.callbacks[packet.token].call(packet.data);\n      delete this.callbacks[packet.token];\n    } else if (this.events[packet.event]) { // If its not simple function call then it must be event if not detached\n      this.events[packet.event].call(null, packet.data);\n    }\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title:string = 'YouKnow';\n}\n","<div>\n\n  \n  <!-- <app-servers></app-servers> -->\n  <app-nav-bar [title]='title'></app-nav-bar>\n  <router-outlet></router-outlet>\n  \n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ServersComponent } from './components/servers/servers.component';\nimport { ServerComponent } from './components/server/server.component';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { ServerConfigComponent } from './components/server-config/server-config.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ServersComponent,\n    ServerComponent,\n    NavBarComponent,\n    ServerConfigComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent implements OnInit {\n  @Input() title: string = '';\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar>\n  <mat-icon>self_improvement</mat-icon>\n  <span>{{title}}</span>\n  <span class=\"example-spacer\"></span>\n  <!-- Server Menu -->\n  <button mat-button aria-label=\"Servers\">\n    <mat-icon>desktop_mac</mat-icon>\n    <span> Servers</span>\n  </button>\n\n  <!-- Operations Menu -->\n\n  <button mat-button [matMenuTriggerFor]=\"operationsMenu\" aria-label=\"Operations\">\n    <mat-icon>engineering</mat-icon>\n    <span> Operations</span>\n  </button>\n  <mat-menu #operationsMenu=\"matMenu\">\n    <button mat-menu-item>\n      <mat-icon>shutter_speed</mat-icon>\n      <span> Watch Realtime</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>switch_camera</mat-icon>\n      <span> Compare Realtime</span>\n    </button>\n  </mat-menu>\n\n  <!-- Performance Menu -->\n  <button mat-button [matMenuTriggerFor]=\"performanceMenu\" aria-label=\"Performance\">\n    <mat-icon>auto_graph</mat-icon>\n    <span> Performance</span>\n  </button>\n  <mat-menu #performanceMenu=\"matMenu\">\n    <button mat-menu-item>\n      <mat-icon>shutter_speed</mat-icon>\n      <span> Single Server</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>switch_camera</mat-icon>\n      <span> Comparison between 2 Servers</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>analytics</mat-icon>\n      <span> Performance Deep Analysis</span>\n    </button>\n  </mat-menu>\n\n  <button mat-icon-button class=\"example-icon favorite-icon\" aria-label=\"Example icon-button with heart icon\">\n    <mat-icon>favorite</mat-icon>\n  </button>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with share icon\">\n    <mat-icon>share</mat-icon>\n  </button>\n</mat-toolbar>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Server } from './../../models/server';\nimport { WsService } from './../../services/ws.service';\nimport { ServersService } from './../../services/servers.service';\nimport * as EventTypes from './../../../assets/common/eventTypes.json';\n\n@Component({\n  selector: 'app-server',\n  templateUrl: './server.component.html',\n  styleUrls: ['./server.component.css']\n})\nexport class ServerComponent implements OnInit {\n  @Input() server: Server = new Server('NOC', '', '12', 1, '212', 22, [], 3333);\n  agent_id: string = '';\n  constructor(private route: ActivatedRoute, private router: Router, private wsService: WsService, private serversService: ServersService,) {\n  }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params: any) => {\n      this.agent_id = params['agent_id'];\n    });\n  }\n\n  ngAfterViewInit() {\n    this.serversService.getServer(this.agent_id).subscribe(server => {\n      this.server = server;\n    });\n\n    this.wsService.attachEvent(EventTypes.OS_UPDATE, this.agent_id, function (data: any) {\n      console.log(data);\n    });\n  }\n}\n","<div class=\"container\">\n  <h1><span class=\"header1 blue\">{{server.agent_id}} </span>\n    | IP: {{server.ip}}\n    | CPU: {{server.cpu_count}}\n    | PLATFORM: {{server.platform}}\n    | Refresh Interval: {{server.stats_interval_ms}}\n    | Last Updated: {{server.last_updated_ts}}\n    </h1>\n</div>\n\n<!-- <h2>{{server.watch_process}}</h2> -->","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport { BrowserModule } from '@angular/platform-browser';\n\nconst MaterialComponents = [\n  MatButtonModule,\n  MatIconModule,\n  MatToolbarModule,\n  MatMenuModule,\n  MatTableModule,\n  MatPaginatorModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatInputModule,\n  BrowserModule\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents],\n})\nexport class MaterialModule { }\n","export class Server {\n  agent_id?: string;\n  ip: string;\n  details: string;\n  cpu_count: number;\n  platform: string;\n  stats_interval_ms: number;\n  watch_process: string[];\n  last_updated_ts: number;\n\n  constructor(agent_id: string, ip: string, details: string, cpu_count: number, platform: string,\n    stats_interval_ms: number, watch_process: string[], last_updated_ts: number) {\n    this.agent_id = agent_id;\n    this.ip = ip;\n    this.details = details;\n    this.cpu_count = cpu_count;\n    this.platform = platform;\n    this.stats_interval_ms = stats_interval_ms;\n    this.watch_process = watch_process;\n    this.last_updated_ts = last_updated_ts;\n  }\n\n  /**\n   * @description Clone this server object\n   */\n  public static clone(server: any) {\n    return new Server(server.agent_id as string || '',\n      server.ip || 'N/A',\n      server.details || 'N/A',\n      server.cpu_count || 0,\n      server.platform || 'N/A',\n      server.stats_interval_ms || 5000,\n      server.watch_process || '[]',\n      server.last_updated_ts || 0);\n  }\n\n  /**\n   * @description Update reference of this server with the updated data\n   * @param server \n   */\n  public update(server: Server) {\n    return new Server(this.agent_id as string, server.details, server.ip, server.cpu_count, server.platform,\n      server.stats_interval_ms, server.watch_process, server.last_updated_ts);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ServersComponent } from './components/servers/servers.component';\nimport { ServerComponent } from './components/server/server.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ServersComponent\n  },\n  {\n    path: 'server',\n    component: ServerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Server } from './../models/server';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServersService {\n  host: string;\n\n  constructor(private http: HttpClient) {\n    this.host = window.location.protocol + '//' + ((window.location.host === 'localhost:4200') ? 'localhost:2600' : window.location.host);\n    console.log(this.host);\n  }\n\n  getServers(): Observable<Server[]> {\n    // https://stackoverflow.com/questions/49297680/angular-5-get-host-name-and-app-name-from-url\n    return this.http.get<Server[]>(this.host + '/agents');\n  }\n\n  getServer(agent_id: string): Observable<Server> {\n    return this.http.get<Server>(this.host + '/agent/' + agent_id);\n  }\n\n  updateServer(agent_id: string, server: Server) {\n    let url = this.host + '/agent/update/' + agent_id;\n    return this.http.post<Server>(url, server).pipe(catchError(this.handleError)).toPromise();\n  }\n\n  addServer(server: Server) {\n    let url = this.host + '/agent/add';\n    return this.http.post<Server>(url, server).pipe(catchError(this.handleError)).toPromise();\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}