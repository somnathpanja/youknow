{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/components/servers/servers.component.ts","webpack:///src/app/components/servers/servers.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/server/server.component.ts","webpack:///src/app/components/server/server.component.html","webpack:///src/app/material/material.module.ts","webpack:///src/app/models/server.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/services/servers.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","ServersComponent","serversService","servers","getServers","subscribe","selector","templateUrl","styleUrls","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","ServerComponent","server","MaterialComponents","MaterialModule","exports","Server","agent_id","ip","cpu_count","platform","stats_interval_ms","watch_process","last_updated_ts","routes","AppRoutingModule","forRoot","ServersService","http","get","providedIn","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { Server } from './../../models/server';\nimport { ServersService } from './../../services/servers.service';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements OnInit {\n  servers: Server[];\n  constructor(private serversService: ServersService) {\n    this.servers = [];\n  }\n\n  ngOnInit() {\n    this.serversService.getServers().subscribe(servers => {\n      this.servers = servers;\n    });\n    \n    // this.servers = [\n    //   new Server('NOC_1', '192.168.1.1', 2, 'linux64', 1000, ['node'], 111),\n    //   new Server('NOC_2', '192.168.1.3', 2, 'linux64', 1000, ['node'], 111)\n    // ];\n  }\n}","<div *ngFor=\"let server of servers\">\n  <app-server  [server]=\"server\">\n  </app-server>\n</div>\n\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title:string = 'YouKnow';\n}\n","<div>\n\n  <mat-toolbar>\n    <mat-icon>self_improvement</mat-icon>\n    <span>{{title}}</span>\n    <span class=\"example-spacer\"></span>\n    <!-- Server Menu -->\n    <button mat-button aria-label=\"Servers\">\n      <mat-icon>desktop_mac</mat-icon>\n      <span> Servers</span>\n    </button>\n\n    <!-- Operations Menu -->\n\n    <button mat-button [matMenuTriggerFor]=\"operationsMenu\" aria-label=\"Operations\">\n      <mat-icon>engineering</mat-icon>\n      <span> Operations</span>\n    </button>\n    <mat-menu #operationsMenu=\"matMenu\">\n      <button mat-menu-item>\n        <mat-icon>shutter_speed</mat-icon>\n        <span> Watch Realtime</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>switch_camera</mat-icon>\n        <span> Compare Realtime</span>\n      </button>\n    </mat-menu>\n\n    <!-- Performance Menu -->\n    <button mat-button [matMenuTriggerFor]=\"performanceMenu\" aria-label=\"Performance\">\n      <mat-icon>auto_graph</mat-icon>\n      <span> Performance</span>\n    </button>\n    <mat-menu #performanceMenu=\"matMenu\">\n      <button mat-menu-item>\n        <mat-icon>shutter_speed</mat-icon>\n        <span> Single Server</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>switch_camera</mat-icon>\n        <span> Comparison between 2 Servers</span>\n      </button>\n      <button mat-menu-item>\n        <mat-icon>analytics</mat-icon>\n        <span> Performance Deep Analysis</span>\n      </button>\n    </mat-menu>\n\n    <button mat-icon-button class=\"example-icon favorite-icon\" aria-label=\"Example icon-button with heart icon\">\n      <mat-icon>favorite</mat-icon>\n    </button>\n    <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with share icon\">\n      <mat-icon>share</mat-icon>\n    </button>\n  </mat-toolbar>\n  <app-servers></app-servers>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ServersComponent } from './components/servers/servers.component';\nimport { ServerComponent } from './components/server/server.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ServersComponent,\n    ServerComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Server } from './../../models/server';\n\n@Component({\n  selector: 'app-server',\n  templateUrl: './server.component.html',\n  styleUrls: ['./server.component.css']\n})\nexport class ServerComponent implements OnInit {\n  @Input() server: Server = new Server('NOC', '12', 1, '212', 22, [], 3333);;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>HELLO</p>\n<p>{{server.agent_id}}</p>\n<p>{{server.ip}}</p>\n<p>{{server.cpu_count}}</p>\n<p>{{server.platform}}</p>\n<p>{{server.stats_interval_ms}}</p>\n<p>{{server.watch_process}}</p>\n<p>{{server.last_updated_ts}}</p>","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\n\nconst MaterialComponents = [\n  MatButtonModule,\n  MatIconModule,\n  MatToolbarModule,\n  MatMenuModule\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents],\n})\nexport class MaterialModule { }\n","export class Server {\n  agent_id: string;\n  ip: string;\n  cpu_count: number;\n  platform: string;\n  stats_interval_ms: number;\n  watch_process: string[];\n  last_updated_ts: number;\n\n  constructor(agent_id: string, ip: string, cpu_count: number, platform: string,\n    stats_interval_ms: number, watch_process: string[], last_updated_ts: number) {\n    this.agent_id = agent_id;\n    this.ip = ip;\n    this.cpu_count = cpu_count;\n    this.platform = platform;\n    this.stats_interval_ms = stats_interval_ms;\n    this.watch_process = watch_process;\n    this.last_updated_ts = last_updated_ts;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Server } from './../models/server';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServersService {\n\n  constructor(private http: HttpClient) { }\n\n  getServers(): Observable<Server[]> {\n    return this.http.get<Server[]>('http://localhost:2600/web/agent/list');\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}